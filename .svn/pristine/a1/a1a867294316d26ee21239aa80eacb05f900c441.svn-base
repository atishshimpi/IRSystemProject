package com.org.irsystem;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.util.FileCopyUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;

import com.org.irsystem.model.FileBucket;
import com.org.irsystem.model.Location;
import com.org.irsystem.model.User;
import com.org.irsystem.model.UserDocument;
import com.org.irsystem.service.LocationService;
import com.org.irsystem.service.UserDocumentService;
import com.org.irsystem.service.UserService;

@Controller
@RequestMapping("/file")
public class FileUploadController {

	@Autowired
	private UserDocumentService userDocumentService;
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private LocationService locationService;
	
	
	/*@RequestMapping(value = { "/list-document-{userId}" }, method = RequestMethod.GET)
	public String addDocuments(@PathVariable int userId, ModelMap model) {
		User user = userService.findById(userId);
		model.addAttribute("user", user);

		FileBucket fileModel = new FileBucket();
		model.addAttribute("fileBucket", fileModel);

		List<UserDocument> documents = userDocumentService.findAllByUserId(userId);
		model.addAttribute("documents", documents);
		
		return "managedocuments";
	}
	
	@RequestMapping(value = { "/listdocuments" }, method = RequestMethod.GET)
	public String addDocuments1(ModelMap model) {
		System.out.println("Inside List document ......");
		User user = userService.findById(1);
		model.addAttribute("user", user);

		FileBucket fileModel = new FileBucket();
		model.addAttribute("fileBucket", fileModel);

		List<UserDocument> documents = userDocumentService.findAllByUserId(1);
		model.addAttribute("documents", documents);
		
		return "managedocuments";
	}
	
	@RequestMapping(value = { "/listdocuments{userId}" }, method = RequestMethod.POST)
	public String uploadDocument(@Valid FileBucket fileBucket, BindingResult result, ModelMap model, @PathVariable int userId) throws IOException{
		
		if (result.hasErrors()) {
			System.out.println("validation errors");
			User user = userService.findById(userId);
			model.addAttribute("user", user);

			List<UserDocument> documents = userDocumentService.findAllByUserId(userId);
			model.addAttribute("documents", documents);
			
			return "managedocuments";
		} else {
			
			System.out.println("Fetching file");
			
			User user = userService.findById(userId);
			model.addAttribute("user", user);

			saveDocument(fileBucket, user);

			return "redirect:/add-document-"+userId;
		}
	}
	
	private void saveDocument(FileBucket fileBucket, User user) throws IOException{
		
		UserDocument document = new UserDocument();
		
		MultipartFile multipartFile = fileBucket.getFile();
		
		document.setName(multipartFile.getOriginalFilename());
		document.setDescription(fileBucket.getDescription());
		document.setType(multipartFile.getContentType());
		document.setContent(multipartFile.getBytes());
		document.setUser(user);
		userDocumentService.saveDocument(document);
	}*/
	
	
	@RequestMapping(value = { "/add-document-{userId}" }, method = RequestMethod.GET)
	public String addDocuments(@PathVariable Long userId, ModelMap model) {
		
		try {
			User user = userService.findById(userId);
			model.addAttribute("user", user);

			FileBucket fileModel = new FileBucket();
			model.addAttribute("fileBucket", fileModel);

			List<UserDocument> documents = userDocumentService.findAllByUserId(userId);
			model.addAttribute("documents", documents);
			
			List<UserDocument> sharedDocuments = userDocumentService.findSharedFilesByUserId(userId);
			model.addAttribute("sharedDocuments", sharedDocuments);
			
			//model.addAttribute("msg", "Product saved successfully !");

			Map<String,String> location = getSubLocationMap();
			model.addAttribute("locationList", location);

		} catch (Exception e) {
			e.printStackTrace();
		}
				
		return "user_manage_products";
	}
	
	
	private Map<String, String> getSubLocationMap() {

		List<Location> locations = locationService.getAll();
		
		Map<String,String> locationMap = new HashMap<String, String>();
		
		for (Location location : locations) {
			locationMap.put(location.getSubLocationName(), location.getSubLocationName());
		} 
		
		return locationMap;
	}


	@RequestMapping(value = { "/add-group-{userId}" }, method = RequestMethod.GET)
	public String addGroup(@PathVariable Long userId, ModelMap model) {
		
		try {
			System.out.println("################### add-document-{userId} : "+userId);
			User user = userService.findById(userId);
			model.addAttribute("user", user);
	
		} catch (Exception e) {
			e.printStackTrace();
		}
				
		return "user_manage_products";
	}
	
	@RequestMapping(value = { "/add-document-display-{userId}" }, method = RequestMethod.GET)
	public String addDocumentsDisplay(@PathVariable Long userId, ModelMap model) {
		System.out.println("################### addDocuments");
		User user = userService.findById(userId);
		model.addAttribute("user", user);

		FileBucket fileModel = new FileBucket();
		model.addAttribute("fileBucket", fileModel);

		List<UserDocument> documents = userDocumentService.findAllByUserId(userId);
		model.addAttribute("documents", documents);
		
		Map<String,String> location = getSubLocationMap();
		model.addAttribute("locationList", location);
		
		return "user_manage_products";
	}
	

	@RequestMapping(value = { "/download-document-{userId}-{docId}" }, method = RequestMethod.GET)
	public String downloadDocument(@PathVariable Long userId, @PathVariable Long docId, HttpServletResponse response) throws IOException {
		UserDocument document = userDocumentService.findById(docId);
		response.setContentType(document.getType());
        response.setContentLength(document.getContent().length);
        response.setHeader("Content-Disposition","attachment; filename=\"" + document.getName() +"\"");
 
        FileCopyUtils.copy(document.getContent(), response.getOutputStream());
 
 		return "redirect:/file/add-document-"+userId;
	}

	@RequestMapping(value = { "/delete-document-{userId}-{docId}" }, method = RequestMethod.GET)
	public String deleteDocument(@PathVariable Long userId, @PathVariable Long docId) {
		userDocumentService.deleteById(docId);
		return "redirect:/file/add-document-"+userId;
	}

	@RequestMapping(value = { "/add-document-{userId}" }, method = RequestMethod.POST)
	public String uploadDocument(@Valid FileBucket fileBucket, BindingResult result, ModelMap model, @PathVariable Long userId) throws IOException{
		
			if (result.hasErrors()) {
			User user = userService.findById(userId);
			model.addAttribute("user", user);
			List<UserDocument> documents = userDocumentService.findAllByUserId(userId);
			model.addAttribute("documents", documents);
			
			Map<String,String> location = getSubLocationMap();
			model.addAttribute("locationList", location);
			
			return "user_manage_products";
		} else {
			User user = userService.findById(userId);
			model.addAttribute("user", user);
			saveDocument(fileBucket, user);
			return "redirect:/file/add-document-"+userId;
		}
	}
	
	/*@RequestMapping(value = { "/add-document-{userId}" }, method = RequestMethod.POST)
	public void getRecommendedDocuments(Long userId){
		
		List<UserDocument> userDocuments = userDocumentService.getRecommendedDocuments(userId);
		
		
	}*/
	
	
	private void saveDocument(FileBucket fileBucket, User user) throws IOException{
		
		UserDocument document = new UserDocument();
		
		MultipartFile multipartFile = fileBucket.getFile();
		
		document.setName(multipartFile.getOriginalFilename());
		document.setProductDescription(fileBucket.getProductDescription());
		document.setType(multipartFile.getContentType());
		document.setContent(multipartFile.getBytes());
		document.setProductName(fileBucket.getProductName());
		document.setProductType(fileBucket.getProductType());
		document.setProductPrice(fileBucket.getProductPrice());
		document.setDealerLocation(fileBucket.getDealerLocation());
		document.setNoOfVisit(fileBucket.getNoOfVisit());
		document.setProductRating(fileBucket.getProductRating());
		document.setUser(user);
		userDocumentService.saveDocument(document);
	}
	
	
	
}
