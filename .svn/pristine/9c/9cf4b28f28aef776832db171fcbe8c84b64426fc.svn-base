package com.org.irsystem.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.org.irsystem.model.QueryDetail;
import com.org.irsystem.model.QueryAttribute;
import com.org.irsystem.model.QueryText;
import com.org.irsystem.model.UserDocument;
import com.org.irsystem.util.ValueComparators;


@Service
public class QuerySearchServiceImpl implements SearchService {

	@Autowired
	private QueryTextService queryTextService;

	@Autowired
	private ValueComparators valueComparators;

	@Resource
	private UserDocumentService userDocumentService;
	
	QueryDetail queryDetails = null;
	
	@Override
	public Map<UserDocument, Float> getQueryValueDocuments(QueryText queryText) {
		
		// global declaration
		List<UserDocument> result = new ArrayList<UserDocument>();
		Map<UserDocument, Float> userDocuments = new LinkedHashMap<>();
		List<QueryAttribute> attributes = new ArrayList<>();
		
		// Natural sorting order by comparator
		Map<String, QueryDetail> map = new TreeMap<>();
	
		
		try {
			
			// get all queries
			List<QueryText> queryTextList = queryTextService.getAll();
			
			
			// flush data from query text and child tables
			for (QueryText queryText2 : queryTextList) {
				queryTextService.delete(queryText2.getId());
			}

			// QueryText 
			// Location:Pune, Type:Mobile
			// Price:1000, Location:Mumbai
			
			// split the query text line by new line \n
			String[] queryTexts = queryText.getText().split("\n");
			
			if (queryTexts != null && queryTexts.length > 0) {

				for (String text : queryTexts) {

					// get all attributes from query text splitting by comma
					// Location:Pune
					String[] attributeValues = text.split(",");

					// Iterate over each attribute
					for (String attributeValue : attributeValues) {

						// split attribute into array [Location,Pune]
						String[] attributeArr = attributeValue.split(":");

						// count the number of occurrences of each attribute
						// e.g Location:Pune and Location:Mumbai so location occurrences are 2
						if (null != map && null != map.get(attributeArr[0])) {
							queryDetails = new QueryDetail();
							queryDetails = map.get(attributeArr[0]); // 
							queryDetails.setProbability(queryDetails.getProbability() + 1);
							queryDetails.getValues().add(attributeArr[1]);
							map.put(attributeArr[0], queryDetails);
						} else {
							queryDetails = new QueryDetail();
							queryDetails.setProbability(0.0f);
							queryDetails.getValues().add(attributeArr[1]);
							map.put(attributeArr[0], queryDetails);
						}

					}
				}
			}

			// add query attribute in list
			for (Map.Entry<String, QueryDetail> entry : map.entrySet()) {
				QueryDetail queryDetail = entry.getValue();

				// formula to calculate probability
				float priority = entry.getValue().getProbability() + 1 / queryTexts.length;
				
				// create object which hold attribute information
				QueryAttribute attribute = new QueryAttribute();
				attribute.setName(entry.getKey());
				attribute.setProbability(priority);
				attribute.setKeyword(StringUtils.join(queryDetail.getValues(), ","));
				attribute.setQueryText(queryText);
				attributes.add(attribute);
			}

			// save query attributes
			queryText.setQueryAttributes(attributes);
			queryTextService.add(queryText);

			// get all query texts
			List<QueryText> queryText1 = queryTextService.getAll();

			for (QueryText qt : queryText1) {

				List<QueryAttribute> queryAttributes = qt.getQueryAttributes();
				Collections.sort(queryAttributes);

				// get all user documents
				List<UserDocument> documents = userDocumentService.findAll();

				// iterate over query attributes for all user documents
				for (QueryAttribute queryAttribute : queryAttributes) {

					for (UserDocument document : documents) {

						if (queryAttribute.getName().equalsIgnoreCase("location")) {
							String string[] = queryAttribute.getKeyword().split(",");
							for (String s : string)
								if (document.getDealerLocation().equalsIgnoreCase(s)) {
									result.add(document);
									userDocuments.put(document, queryAttribute.getProbability());
								}
						} else if (queryAttribute.getName().equalsIgnoreCase("type")) {
							String string[] = queryAttribute.getKeyword().split(",");
							for (String s : string)
								if (document.getProductType().equalsIgnoreCase(s)) {
									result.add(document);
									userDocuments.put(document, queryAttribute.getProbability());
								}
						} else if (queryAttribute.getName().equalsIgnoreCase("name")) {
							String string[] = queryAttribute.getKeyword().split(",");
							for (String s : string)
								if (document.getProductName().equalsIgnoreCase(s)) {
									result.add(document);
									userDocuments.put(document, queryAttribute.getProbability());
								}
						} else if (queryAttribute.getName().equalsIgnoreCase("price")) {
							String string[] = queryAttribute.getKeyword().split(",");
							for (String s : string)
								if (document.getProductPrice().equals(Float.valueOf(s))) {
									result.add(document);
									userDocuments.put(document, queryAttribute.getProbability());
								}
						} else if (queryAttribute.getName().equalsIgnoreCase("noofvisit")) {
							String string[] = queryAttribute.getKeyword().split(",");
							for (String s : string)
								if (document.getNoOfVisit().equals(Integer.valueOf(s))) {
									result.add(document);
									userDocuments.put(document, queryAttribute.getProbability());
								}
						} else if (queryAttribute.getName().equalsIgnoreCase("rating")) {
							String string[] = queryAttribute.getKeyword().split(",");
							for (String s : string)
								if (document.getProductRating().equals(Integer.valueOf(s))) {
									result.add(document);
									userDocuments.put(document, queryAttribute.getProbability());
								}
						}
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return userDocuments;
	}

	@Override
	public Map<UserDocument, Float> getContentValueDocuments() {

		return null;
	}

}
