<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- 
	This is responsible for automatically converting our custom POJO to JSON. 
	Make sure you have Jackson in your classpath
	-->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	    <beans:property name="order" value="3" />
		<beans:property name="prefix" value="/WEB-INF/views/jsp/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
	    <beans:property name="order" value="2" />
	    <beans:property name="viewClass">
	        <beans:value>
	            org.springframework.web.servlet.view.tiles3.TilesView
	        </beans:value>
	    </beans:property>
	</beans:bean>
	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
	    <beans:property name="definitions">
	        <beans:list>
	           <!-- <beans:value>/WEB-INF/spring/views.xml</beans:value> -->
	           <beans:value>/WEB-INF/**/tiles-def.xml</beans:value>
	           <!-- /WEB-INF/**/tiles.xml -->
	        </beans:list>
	    </beans:property>
	</beans:bean>
	<context:component-scan base-package="com" />
	<context:component-scan base-package="com.org.irsystem" />
	
    <beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <beans:property name="driverClassName" value="${jdbc.driverClassName}" />
        <beans:property name="url" value="${jdbc.url}" />
        <beans:property name="username" value="${jdbc.username}" />
        <beans:property name="password" value="${jdbc.password}" />
    </beans:bean>
 
    <!-- Hibernate 4 SessionFactory Bean definition -->
    <beans:bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <beans:property name="dataSource" ref="dataSource" />
        <beans:property name="annotatedClasses">
            <beans:list>
                <beans:value>com.org.irsystem.model.User</beans:value>
                <beans:value>com.org.irsystem.model.CSP</beans:value>
                <beans:value>com.org.irsystem.model.UserDocument</beans:value>
                <beans:value>com.org.irsystem.model.FileShare</beans:value>
                <beans:value>com.org.irsystem.model.Group</beans:value>
                <beans:value>com.org.irsystem.model.UserDocumentToken</beans:value>
                <beans:value>com.org.irsystem.model.Recommend</beans:value>
                <beans:value>com.org.irsystem.model.Location</beans:value>
                <beans:value>com.org.irsystem.model.QueryText</beans:value>
                <beans:value>com.org.irsystem.model.QueryAttribute</beans:value>
                <beans:value>com.org.irsystem.model.ContentAttribute</beans:value>
                <beans:value>com.org.irsystem.model.Type</beans:value>
                
            </beans:list>
        </beans:property>
        <beans:property name="hibernateProperties">
            <beans:props>
                <beans:prop key="hibernate.dialect">${hibernate.dialect}</beans:prop>
                <beans:prop key="hibernate.show_sql">${hibernate.show_sql}</beans:prop>
                <beans:prop key="hibernate.hbm2ddl.auto">${hibernate_hbm2ddl_auto}</beans:prop>
                <beans:prop key="current_session_context_class">${current_session_context_class}</beans:prop> 
                <beans:prop key="hibernate.enable_lazy_load_no_trans">${hibernate.enable_lazy_load_no_trans}</beans:prop>
            </beans:props>
        </beans:property>
    </beans:bean>
	
	<beans:bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" >
	    <beans:property name="location" value="/WEB-INF/spring/application.properties" />
	</beans:bean>
	
    <context:component-scan base-package="com.org.irsystem" />
     
    <tx:annotation-driven transaction-manager="transactionManager"/>
     
    <beans:bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <beans:property name="sessionFactory" ref="sessionFactory" />
    </beans:bean>
    
    <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		 <!-- setting maximum upload size -->
		<beans:property name="maxUploadSize" value="10000000" />
	</beans:bean>
    
    
	
</beans:beans>
